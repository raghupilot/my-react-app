{
  "8": {
    "version": "Java SE 8",
    "releaseDate": "March 18, 2014",
    "jeps": [
      {
        "number": "126",
        "title": "Lambda Expressions",
        "description": "Add lambda expressions, default methods, and related features to the Java programming language and modify the VM and libraries to support them.",
        "examples": [
          "https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html",
          "https://www.happycoders.eu/java/lambda-expressions-tutorial/"
        ]
      },
      {
        "number": "138",
        "title": "Autoconf-Based Build System",
        "description": "Provide a new build system for the JDK, based on the GNU Autoconf framework.",
        "examples": [
          "https://openjdk.org/jeps/138"
        ]
      },
      {
        "number": "139",
        "title": "Enhance javac to Improve Build Speed",
        "description": "Improve the build speed of large projects by enhancing javac to store symbol information in a separate cache.",
        "examples": [
          "https://www.infoworld.com/article/2609090/java-8-s-key-to-success-the-new-jdk.html"
        ]
      },
      {
        "number": "142",
        "title": "Reduce Cache Contention on Specified Fields",
        "description": "Reduce cache contention for fields that are frequently accessed in parallel by different threads.",
        "examples": [
          "https://openjdk.org/jeps/142"
        ]
      },
      {
        "number": "153",
        "title": "Launch JavaFX Applications",
        "description": "Define a standard and convenient way to launch JavaFX applications.",
        "examples": [
          "https://docs.oracle.com/javase/8/javafx/api/javafx/application/Application.html"
        ]
      }
    ]
  },
  "9": {
    "version": "Java SE 9",
    "releaseDate": "September 21, 2017",
    "jeps": [
      {
        "number": "200",
        "title": "The Modular JDK",
        "description": "Modularize the JDK and make it scale down for small devices, improve security and maintainability, and improve performance.",
        "examples": [
          "https://www.baeldung.com/java-9-modularity",
          "https://openjdk.org/jeps/200"
        ]
      },
      {
        "number": "213",
        "title": "Milling Project Coin",
        "description": "A follow-up to Project Coin that includes small language changes to improve the developer experience.",
        "examples": [
          "https://www.oracle.com/technical-resources/articles/java/ma14-java-se-8-trends.html"
        ]
      },
      {
        "number": "222",
        "title": "jshell: The Java Shell",
        "description": "Create an interactive tool for evaluating declarations, statements, and expressions of the Java programming language.",
        "examples": [
          "https://docs.oracle.com/javase/9/jshell/introduction-jshell.htm",
          "https://www.baeldung.com/java-9-repl"
        ]
      },
      {
        "number": "266",
        "title": "More Concurrency Updates",
        "description": "Improve the CompletableFuture API and add interoperation with other concurrency components.",
        "examples": [
          "https://www.baeldung.com/java-9-completablefuture"
        ]
      },
      {
        "number": "269",
        "title": "Convenience Factory Methods for Collections",
        "description": "Define library APIs to make it convenient to create instances of collections and maps with small numbers of elements.",
        "examples": [
          "https://www.baeldung.com/java-9-collections-factory-methods",
          "https://openjdk.org/jeps/269"
        ]
      }
    ]
  },
  "10": {
    "version": "Java SE 10",
    "releaseDate": "March 20, 2018",
    "jeps": [
      {
        "number": "286",
        "title": "Local-Variable Type Inference",
        "description": "Enhance the Java Language to extend type inference to declarations of local variables with initializers.",
        "examples": [
          "https://www.baeldung.com/java-10-local-variable-type-inference",
          "https://openjdk.org/jeps/286"
        ]
      },
      {
        "number": "296",
        "title": "Consolidate the JDK Forest into a Single Repository",
        "description": "Combine the numerous repositories of the JDK forest into a single repository.",
        "examples": [
          "https://openjdk.org/jeps/296"
        ]
      },
      {
        "number": "304",
        "title": "Garbage-Collector Interface",
        "description": "Improve the source code isolation of different garbage collectors by introducing a clean garbage collector interface.",
        "examples": [
          "https://openjdk.org/jeps/304"
        ]
      },
      {
        "number": "307",
        "title": "Parallel Full GC for G1",
        "description": "Improve G1 worst-case latencies by making the full GC parallel.",
        "examples": [
          "https://openjdk.org/jeps/307"
        ]
      },
      {
        "number": "310",
        "title": "Application Class-Data Sharing",
        "description": "Extend the existing Class-Data Sharing (CDS) feature to allow application classes to be placed in the shared archive.",
        "examples": [
          "https://openjdk.org/jeps/310",
          "https://www.baeldung.com/java-10-performance-improvements"
        ]
      }
    ]
  },
  "11": {
    "version": "Java SE 11",
    "releaseDate": "September 25, 2018",
    "jeps": [
      {
        "number": "323",
        "title": "Local-Variable Syntax for Lambda Parameters",
        "description": "Allows var to be used in lambda parameters",
        "examples": [
          "https://openjdk.org/jeps/323",
          "https://mkyong.com/java/java-11-var-in-lambda-expressions/",
          "https://www.baeldung.com/java-var-lambda-params",
          "https://blogs.oracle.com/javamagazine/post/java-var-lambda-parameters"
        ]
      },
      {
        "number": "321",
        "title": "HTTP Client (Standard)",
        "description": "Adds a standard HTTP client API to the JDK",
        "examples": [
          "https://openjdk.org/jeps/321",
          "https://www.baeldung.com/java-9-http-client",
          "https://mkyong.com/java/java-11-httpclient-examples/",
          "https://www.tutorialspoint.com/java11/java11_httpclient.htm",
          "https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpClient.html"
        ]
        
      },
      {
        "number": "328",
        "title": "Flight Recorder",
        "description": "Provides a low-overhead data collection framework for troubleshooting",
        "examples": [
          "https://www.baeldung.com/java-flight-recorder-monitoring",
          "https://docs.oracle.com/javacomponents/jmc-5-4/jfr-runtime-guide/run.htm",
          "https://github.com/flight-recorder-examples/basic-event-examples",
          "https://developers.redhat.com/blog/2020/08/25/get-started-with-jdk-flight-recorder-in-openjdk-11",
          "https://www.tutorialspoint.com/java11/java11_flight_recorder.htm"
        ] 
      },
      {
        "number": "333",
        "title": "ZGC: A Scalable Low-Latency Garbage Collector",
        "description": "Adds a new garbage collector (ZGC) that is designed for low latency and scalability",
        "examples": [
          "https://openjdk.org/jeps/333",
          "https://wiki.openjdk.org/display/zgc/Main",
          "https://www.baeldung.com/jvm-zgc-garbage-collector"
        ]
      },
      {
        "number": "330",
        "title": "Launch Single-File Source-Code Programs",
        "description": "Allows running Java source files directly without explicit compilation step.",
        "examples": [
          "https://openjdk.org/jeps/330",
          "https://www.baeldung.com/java-single-file-source-code",
          "https://mkyong.com/java/java-11-single-file-source-code/"
        ]
      },
      {
        "number": "318",
        "title": "Epsilon: A No-Op Garbage Collector",
        "description": "Adds a no-op garbage collector that handles memory allocation but does not reclaim memory.",
        "examples": [
          "https://openjdk.org/jeps/318",
          "https://www.baeldung.com/java-epsilon-gc",
          "https://wiki.openjdk.org/display/epsilon/Main"
        ]
      },
      {
        "number": "320",
        "title": "Remove the Java EE and CORBA Modules",
        "description": "Removes Java EE and CORBA modules from the Java SE Platform and JDK.",
        "examples": [
          "https://openjdk.org/jeps/320",
          "https://www.baeldung.com/java-ee-vs-se-vs-me",
          "https://mkyong.com/java/what-is-new-in-java-11/"
        ]
      },
      {
        "number": "332",
        "title": "Transport Layer Security (TLS) 1.3",
        "description": "Implements Transport Layer Security (TLS) 1.3 specification for improved security and performance.",
        "examples": [
          "https://openjdk.org/jeps/332",
          "https://www.baeldung.com/java-tls-1-3",
          "https://docs.oracle.com/en/java/javase/11/security/java-secure-socket-extension-jsse-reference-guide.html"
        ]
      },
      {
        "number": "331",
        "title": "Low-Overhead Heap Profiling",
        "description": "Provides a low-overhead way to sample Java heap allocations via JVMTI.",
        "examples": [
          "https://openjdk.org/jeps/331",
          "https://www.baeldung.com/java-heap-dump-capture",
          "https://developers.redhat.com/blog/2020/08/25/get-started-with-jdk-flight-recorder-in-openjdk-11"
        ]
      }
    ]
  },
  "17": {
    "version": "Java SE 17",
    "releaseDate": "September 14, 2021",
    "jeps": [
      {
        "number": "406",
        "title": "Pattern Matching for switch (Preview)",
        "description": "Enhances the Java programming language with pattern matching for switch expressions and statements.",
        "examples": [
          "https://openjdk.org/jeps/406",
          "https://www.baeldung.com/java-pattern-matching-switch",
          "https://mkyong.com/java/what-is-new-in-java-17/"
        ]
      },
      {
        "number": "409",
        "title": "Sealed Classes",
        "description": "Enhances the Java programming language with sealed classes and interfaces that restrict which other classes or interfaces may extend or implement them.",
        "examples": [
          "https://openjdk.org/jeps/409",
          "https://www.baeldung.com/java-sealed-classes-interfaces",
          "https://docs.oracle.com/en/java/javase/17/language/sealed-classes-and-interfaces.html"
        ]
      },
      {
        "number": "382",
        "title": "New macOS Rendering Pipeline",
        "description": "Implements a modern rendering pipeline for macOS using the Apple Metal framework.",
        "examples": [
          "https://openjdk.org/jeps/382",
          "https://www.infoworld.com/article/3627329/jdk-17-the-new-features-in-java-17.html",
          "https://blogs.oracle.com/java/post/moving-the-macos-jdk-to-metal"
        ]
      },
      {
        "number": "398",
        "title": "Deprecate the Applet API for Removal",
        "description": "Deprecates the Applet API for removal. It has been essentially irrelevant since all web browsers removed support for Java browser plug-ins.",
        "examples": [
          "https://openjdk.org/jeps/398",
          "https://www.baeldung.com/java-17-new-features",
          "https://mkyong.com/java/what-is-new-in-java-17/"
        ]
      },
      {
        "number": "391",
        "title": "macOS/AArch64 Port",
        "description": "Ports the JDK to macOS/AArch64 in response to Apple's introduction of M1 processors.",
        "examples": [
          "https://openjdk.org/jeps/391",
          "https://www.infoq.com/news/2021/09/java17-released/",
          "https://blogs.oracle.com/java/post/java-on-mac-os-x-aarch64"
        ]
      },
      {
        "number": "356",
        "title": "Enhanced Pseudo-Random Number Generators",
        "description": "Provides new interface types and implementations for pseudorandom number generators (PRNGs).",
        "examples": [
          "https://openjdk.org/jeps/356",
          "https://www.baeldung.com/java-17-random-number-generators",
          "https://blogs.oracle.com/java/post/new-random-number-generators-in-jdk-17"
        ]
      },
      {
        "number": "403",
        "title": "Strongly Encapsulate JDK Internals",
        "description": "Strongly encapsulates all internal elements of the JDK, except for critical internal APIs such as sun.misc.Unsafe.",
        "examples": [
          "https://openjdk.org/jeps/403",
          "https://www.baeldung.com/java-17-new-features#2-strongly-encapsulating-jdk-internals",
          "https://inside.java/2021/07/21/quality-heads-up/"
        ]
      },
      {
        "number": "412",
        "title": "Foreign Function & Memory API (Incubator)",
        "description": "Introduces an API that Java programs can use to interoperate with code and data outside of the Java runtime.",
        "examples": [
          "https://openjdk.org/jeps/412",
          "https://www.baeldung.com/java-foreign-memory-api",
          "https://github.com/openjdk/panama-foreign/blob/foreign-jextract/doc/panama_ffi.md"
        ]
      },
      {
        "number": "415",
        "title": "Context-Specific Deserialization Filters",
        "description": "Allows applications to configure context-specific and dynamically-selected deserialization filters.",
        "examples": [
          "https://openjdk.org/jeps/415",
          "https://www.baeldung.com/java-17-new-features#8-context-specific-deserialization-filters",
          "https://docs.oracle.com/en/java/javase/17/core/serialization-filtering1.html"
        ]
      },
      {
        "number": "414",
        "title": "Vector API (Second Incubator)",
        "description": "Provides an API to express vector computations that reliably compile at runtime to optimal vector instructions.",
        "examples": [
          "https://openjdk.org/jeps/414",
          "https://www.baeldung.com/java-vector-api",
          "https://github.com/openjdk/jdk/blob/master/test/jdk/jdk/incubator/vector/examples/"
        ]
      }
    ]
  },
  "21": {
    "version": "Java SE 21",
    "releaseDate": "September 19, 2023",
    "jeps": [
      {
        "number": "431",
        "title": "Sequenced Collections",
        "description": "Introduces new interfaces to represent collections with a defined encounter order, making it easier to work with first and last elements.",
        "examples": [
          "https://openjdk.org/jeps/431",
          "https://www.baeldung.com/java-21-sequence-collection",
          "https://howtodoinjava.com/java/java-21-new-features/#sequenced-collections"
        ]
      },
      {
        "number": "430",
        "title": "String Templates (Preview)",
        "description": "Enhances the Java programming language with string templates, which simplify the creation of strings that include values and expressions.",
        "examples": [
          "https://openjdk.org/jeps/430",
          "https://www.baeldung.com/java-21-string-templates",
          "https://blogs.oracle.com/java/post/the-arrival-of-string-templates-in-java"
        ]
      },
      {
        "number": "440",
        "title": "Record Patterns",
        "description": "Enhances pattern matching by allowing record patterns to deconstruct record values, making it easier to work with complex data structures.",
        "examples": [
          "https://openjdk.org/jeps/440",
          "https://www.baeldung.com/java-21-record-patterns",
          "https://howtodoinjava.com/java/java-21-new-features/#record-patterns"
        ]
      },
      {
        "number": "441",
        "title": "Pattern Matching for switch",
        "description": "Enhances the switch expression to work with patterns, allowing more sophisticated type-based pattern matching.",
        "examples": [
          "https://openjdk.org/jeps/441",
          "https://www.baeldung.com/java-21-switch-pattern-matching",
          "https://mkyong.com/java/what-is-new-in-java-21/"
        ]
      },
      {
        "number": "442",
        "title": "Foreign Function & Memory API (Third Preview)",
        "description": "Introduces an API for Java programs to interoperate with code and data outside of the Java runtime.",
        "examples": [
          "https://openjdk.org/jeps/442",
          "https://www.baeldung.com/java-foreign-memory-api",
          "https://github.com/openjdk/panama-foreign/blob/foreign-jextract/doc/panama_ffi.md"
        ]
      },
      {
        "number": "443",
        "title": "Unnamed Patterns and Variables (Preview)",
        "description": "Enhances the Java language with unnamed patterns and variables, improving code readability when certain values don't need to be named.",
        "examples": [
          "https://openjdk.org/jeps/443",
          "https://www.baeldung.com/java-21-unnamed-patterns-variables",
          "https://blogs.oracle.com/java/post/unnamed-variables-and-patterns-in-java"
        ]
      },
      {
        "number": "444",
        "title": "Virtual Threads",
        "description": "Introduces lightweight virtual threads that dramatically reduce the effort of writing, maintaining, and observing high-throughput concurrent applications.",
        "examples": [
          "https://openjdk.org/jeps/444",
          "https://www.baeldung.com/java-virtual-threads",
          "https://docs.oracle.com/en/java/javase/21/core/virtual-threads.html"
        ]
      },
      {
        "number": "445",
        "title": "Unnamed Classes and Instance Main Methods (Preview)",
        "description": "Simplifies the Java programming language by allowing classes to be unnamed and methods to be declared as instance main methods.",
        "examples": [
          "https://openjdk.org/jeps/445",
          "https://www.baeldung.com/java-21-unnamed-classes",
          "https://blogs.oracle.com/java/post/simplified-java-development-with-unnamed-classes"
        ]
      },
      {
        "number": "446",
        "title": "Scoped Values (Preview)",
        "description": "Introduces scoped values as a safer and more efficient replacement for ThreadLocal variables.",
        "examples": [
          "https://openjdk.org/jeps/446",
          "https://www.baeldung.com/java-21-scoped-values",
          "https://inside.java/2023/08/31/sip075/"
        ]
      },
      {
        "number": "448",
        "title": "Vector API (Sixth Incubator)",
        "description": "Provides an API to express vector computations that reliably compile at runtime to optimal vector instructions on supported CPU architectures.",
        "examples": [
          "https://openjdk.org/jeps/448",
          "https://www.baeldung.com/java-vector-api",
          "https://github.com/openjdk/jdk/blob/master/test/jdk/jdk/incubator/vector/examples/"
        ]
      },
      {
        "number": "449",
        "title": "Deprecate the Windows 32-bit x86 Port for Removal",
        "description": "Deprecates the Windows 32-bit x86 port with the intent to remove it in a future release.",
        "examples": [
          "https://openjdk.org/jeps/449",
          "https://www.infoq.com/news/2023/09/java21-goes-ga/",
          "https://mkyong.com/java/what-is-new-in-java-21/"
        ]
      }
    ]
  },
  "24": {
    "version": "Java SE 24",
    "releaseDate": "March 19, 2024",
    "jeps": [
      {
        "number": "456",
        "title": "String Templates (Second Preview)",
        "description": "Enhances string templates with improved syntax and capabilities for string interpolation and structured text processing.",
        "examples": [
          "https://openjdk.org/jeps/456",
          "https://inside.java/2024/01/05/inside-java-newscast-37/",
          "https://www.baeldung.com/java-string-templates"
        ]
      },
      {
        "number": "457",
        "title": "Class-File API (Preview)",
        "description": "Introduces an API for parsing, generating, and transforming Java class files, enabling better tooling and frameworks.",
        "examples": [
          "https://openjdk.org/jeps/457",
          "https://inside.java/2023/12/22/classfile-api/",
          "https://github.com/openjdk/jdk/tree/master/test/jdk/java/lang/classfile"
        ]
      },
      {
        "number": "458",
        "title": "Launch Multi-File Source-Code Programs",
        "description": "Extends the source-code launcher to handle programs spread across multiple source files.",
        "examples": [
          "https://openjdk.org/jeps/458",
          "https://inside.java/2024/01/09/launching-multi-file-programs/",
          "https://blogs.oracle.com/java/post/early-access-jdk-24"
        ]
      },
      {
        "number": "459",
        "title": "String Templates (Preview)",
        "description": "Improves string interpolation and template processing with enhanced features and better performance.",
        "examples": [
          "https://openjdk.org/jeps/459",
          "https://www.baeldung.com/java-string-templates-update",
          "https://dev.java/learn/string-templates/"
        ]
      },
      {
        "number": "460",
        "title": "Vector API (Seventh Incubator)",
        "description": "Further improves the Vector API for expressing vector computations that compile to optimal hardware instructions.",
        "examples": [
          "https://openjdk.org/jeps/460",
          "https://inside.java/2024/01/15/vector-api-updates/",
          "https://github.com/openjdk/jdk/tree/master/test/jdk/jdk/incubator/vector"
        ]
      },
      {
        "number": "461",
        "title": "Unnamed Classes and Instance Main Methods (Second Preview)",
        "description": "Refines the unnamed classes feature and instance main methods for simpler program structure.",
        "examples": [
          "https://openjdk.org/jeps/461",
          "https://inside.java/2024/01/12/unnamed-classes-preview/",
          "https://dev.java/learn/unnamed-classes/"
        ]
      },
      {
        "number": "462",
        "title": "Structured Concurrency (Second Preview)",
        "description": "Simplifies concurrent programming by treating multiple tasks running in different threads as a single unit of work.",
        "examples": [
          "https://openjdk.org/jeps/462",
          "https://www.baeldung.com/java-structured-concurrency",
          "https://inside.java/2024/01/18/structured-concurrency/"
        ]
      },
      {
        "number": "463",
        "title": "Explicit Receiver Parameters",
        "description": "Introduces explicit receiver parameters to make instance method and constructor invocations more clear.",
        "examples": [
          "https://openjdk.org/jeps/463",
          "https://inside.java/2024/01/20/explicit-receiver-parameters/",
          "https://dev.java/learn/explicit-receivers/"
        ]
      },
      {
        "number": "464",
        "title": "Scoped Values (Second Preview)",
        "description": "Enhances scoped values with improved API and better integration with virtual threads.",
        "examples": [
          "https://openjdk.org/jeps/464",
          "https://www.baeldung.com/java-scoped-values",
          "https://inside.java/2024/01/22/scoped-values-preview/"
        ]
      },
      {
        "number": "465",
        "title": "Generational ZGC",
        "description": "Enhances the Z Garbage Collector with generational collection to improve application performance.",
        "examples": [
          "https://openjdk.org/jeps/465",
          "https://inside.java/2024/01/25/zgc-generational/",
          "https://wiki.openjdk.org/display/zgc/Main"
        ]
      }
    ]
  }
}
