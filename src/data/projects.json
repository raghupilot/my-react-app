{
    "amber": {
      "name": "Project Amber",
      "description": "Explores and incubates smaller, productivity-oriented Java language features.",
      "overview": "Project Amber is focused on exploring and incubating smaller, productivity-oriented Java language features that have been accepted as candidate JEPs under the OpenJDK JEP process.",
      "officialLink": "https://openjdk.org/projects/amber/",
      "relatedJeps": [
        {
            "number": "456",
            "title": "String Templates (Second Preview)",
            "link": "https://openjdk.org/jeps/456"
          },
          {
            "number": "440",
            "title": "Record Patterns",
            "link": "https://openjdk.org/jeps/440"
          },
          {
            "number": "441",
            "title": "Pattern Matching for switch",
            "link": "https://openjdk.org/jeps/441"
          },
          {
            "number": "443",
            "title": "Unnamed Patterns and Variables (Preview)",
            "link": "https://openjdk.org/jeps/443"
          }
      ],
      "examples": [
        {
          "title": "Pattern Matching Examples",
          "url": "https://github.com/openjdk/amber-docs/blob/master/pattern-matching-examples"
        },
        {
          "title": "String Templates Guide",
          "url": "https://dev.java/learn/string-templates/"
        }
      ]
    },
    "panama": {
      "name": "Project Panama",
      "description": "Improves and enriches the connections between Java and non-Java code.",
      "overview": "Project Panama is designed to improve and enrich the connections between the Java virtual machine and non-Java APIs, including many interfaces commonly used by C programmers.",
      "officialLink": "https://openjdk.org/projects/panama/",
      "relatedJeps": [
        {
            "number": "442",
            "title": "Foreign Function & Memory API",
            "link": "https://openjdk.org/jeps/442"
          },
          {
            "number": "460",
            "title": "Vector API (Seventh Incubator)",
            "link": "https://openjdk.org/jeps/460"
          },
          {
            "number": "454",
            "title": "Foreign Function & Memory API (Third Preview)",
            "link": "https://openjdk.org/jeps/454"
          }
      ],
      "examples": [
        {
          "title": "Foreign Function Examples",
          "url": "https://github.com/openjdk/panama-foreign/blob/foreign-jextract/doc/panama_ffi.md"
        },
        {
          "title": "Vector API Tutorial",
          "url": "https://dev.java/learn/vector-api/"
        }
      ]
    },
    "loom": {
      "name": "Project Loom",
      "description": "Introduces new lightweight concurrency constructs for the JDK.",
      "overview": "Project Loom aims to drastically reduce the effort of writing, maintaining, and observing high-throughput concurrent applications through virtual threads and structured concurrency.",
      "officialLink": "https://wiki.openjdk.org/display/loom",
      "relatedJeps": [
        {
            "number": "444",
            "title": "Virtual Threads",
            "link": "https://openjdk.org/jeps/444"
          },
          {
            "number": "462",
            "title": "Structured Concurrency (Second Preview)",
            "link": "https://openjdk.org/jeps/462"
          },
          {
            "number": "453",
            "title": "Structured Concurrency (First Preview)",
            "link": "https://openjdk.org/jeps/453"
          }
      ],
      "examples": [
        {
          "title": "Virtual Threads Guide",
          "url": "https://docs.oracle.com/en/java/javase/21/core/virtual-threads.html"
        },
        {
          "title": "Structured Concurrency Examples",
          "url": "https://github.com/openjdk/loom/blob/fibers/doc/structured_concurrency.md"
        }
      ]
    },
    "babylon": {
    "name": "Project Babylon",
    "description": "Explores and incubates improvements to Java's numerical computing capabilities.",
    "overview": "Project Babylon aims to explore and incubate improvements to numerical computing in Java, focusing on floating-point computation, array processing, and related optimizations to enable high-performance numerical computing applications.",
    "officialLink": "https://openjdk.org/projects/babylon/",
    "relatedJeps": [
        {
            "number": "410",
            "title": "Remove the Experimental AOT and JIT Compiler",
            "link": "https://openjdk.org/jeps/410"
          },
          {
            "number": "318",
            "title": "Epsilon: A No-Op Garbage Collector",
            "link": "https://openjdk.org/jeps/318"
          },
          {
            "number": "295",
            "title": "Ahead-of-Time Compilation",
            "link": "https://openjdk.org/jeps/295"
          },
          {
            "number": "352",
            "title": "Non-Volatile Mapped Byte Buffers",
            "link": "https://openjdk.org/jeps/352"
          }
    ],
    "examples": [
      {
        "title": "Vector API Examples",
        "url": "https://github.com/openjdk/babylon/blob/master/doc/vector-examples.md"
      },
      {
        "title": "Numerical Computing Guide",
        "url": "https://dev.java/learn/numerical-computing-improvements-in-java/"
      },
      {
        "title": "Performance Optimizations",
        "url": "https://inside.java/2023/10/13/babylon-performance/"
      },
      {
        "title": "Official Documentation",
        "url": "https://wiki.openjdk.org/display/babylon"
      },
      {
        "title": "Vector API Tutorial",
        "url": "https://www.baeldung.com/java-vector-api"
      }
    ],
    "features": [
      {
        "name": "Primitive Classes",
        "description": "Enhanced support for user-defined primitive-like types"
      },
      {
        "name": "Vector Computations",
        "description": "Improved SIMD (Single Instruction, Multiple Data) operations"
      },
      {
        "name": "Array Processing",
        "description": "Enhanced array processing capabilities for numerical computations"
      },
      {
        "name": "Performance Optimizations",
        "description": "Specialized optimizations for numerical computing workloads"
      }
    ],
    "goals": [
      "Improve Java's numerical computing capabilities",
      "Enable better performance for scientific computing",
      "Provide better integration with native numerical libraries",
      "Optimize array-based computations",
      "Support modern CPU architectures efficiently"
    ],
    "status": {
      "state": "Active Development",
      "currentPhase": "Incubator",
      "targetRelease": "JDK 24 and beyond",
      "lastUpdated": "2024"
    },
    "resources": [
      {
        "title": "Project Wiki",
        "url": "https://wiki.openjdk.org/display/babylon"
      },
      {
        "title": "Mailing List",
        "url": "https://mail.openjdk.org/mailman/listinfo/babylon-dev"
      },
      {
        "title": "Source Repository",
        "url": "https://github.com/openjdk/babylon"
      },
      {
        "title": "Issue Tracker",
        "url": "https://bugs.openjdk.org/projects/JDK/issues/?jql=project%20%3D%20JDK%20AND%20component%20%3D%20babylon"
      }
    ]
  },
  "valhalla": {
    "name": "Project Valhalla",
    "description": "Introduces value types and specialized generics to the Java platform, enabling high-performance data structures.",
    "overview": "Project Valhalla is transforming Java's type system by introducing value objects, primitive objects, and specialized generics. This enables better performance through reduced memory usage and improved data locality, while maintaining Java's security and abstraction principles.",
    "officialLink": "https://openjdk.org/projects/valhalla/",
    "relatedJeps": [
        {
            "number": "401",
            "title": "Primitive Objects",
            "link": "https://openjdk.org/jeps/401"
          },
          {
            "number": "402",
            "title": "Value Types",
            "link": "https://openjdk.org/jeps/402"
          },
          {
            "number": "454",
            "title": "Foreign Function & Memory API",
            "link": "https://openjdk.org/jeps/454"
          },
          {
            "number": "447",
            "title": "Primitive Classes - Preview",
            "link": "https://openjdk.org/jeps/447"
          }
    ],
    "examples": [
      {
        "title": "Primitive Classes Guide",
        "url": "https://openjdk.org/projects/valhalla/design-notes/state-of-valhalla/01-background"
      },
      {
        "title": "Value Types Tutorial",
        "url": "https://cr.openjdk.org/~briangoetz/valhalla/sov/01-background.html"
      },
      {
        "title": "Practical Examples",
        "url": "https://github.com/openjdk/valhalla/blob/lworld/doc/examples.md"
      },
      {
        "title": "Performance Benchmarks",
        "url": "https://wiki.openjdk.org/display/valhalla/Performance+Results"
      },
      {
        "title": "Implementation Status",
        "url": "https://wiki.openjdk.org/display/valhalla/Implementation+Notes"
      }
    ],
    "features": [
      {
        "name": "Primitive Objects",
        "description": "Objects with primitive-like performance characteristics but full object functionality"
      },
      {
        "name": "Value Types",
        "description": "User-defined types that are neither primitives nor object references"
      },
      {
        "name": "Specialized Generics",
        "description": "Generic types that can be specialized for primitive types without boxing"
      },
      {
        "name": "Universal Generics",
        "description": "Enhanced generic type system supporting both reference and value types"
      },
      {
        "name": "Memory Layout Control",
        "description": "Better control over object memory layout for improved performance"
      }
    ],
    "goals": [
      "Align JVM memory layout with modern hardware capabilities",
      "Eliminate overhead of object identity where not needed",
      "Enable high-performance generic programming",
      "Preserve key Java characteristics like security and abstraction",
      "Improve memory efficiency and cache utilization"
    ],
    "status": {
      "state": "Active Development",
      "currentPhase": "Preview/Incubator",
      "targetRelease": "JDK 25 and beyond",
      "lastUpdated": "2024"
    },
    "resources": [
      {
        "title": "Project Wiki",
        "url": "https://wiki.openjdk.org/display/valhalla"
      },
      {
        "title": "Mailing List",
        "url": "https://mail.openjdk.org/mailman/listinfo/valhalla-dev"
      },
      {
        "title": "Source Repository",
        "url": "https://github.com/openjdk/valhalla"
      },
      {
        "title": "State of Valhalla",
        "url": "https://cr.openjdk.org/~briangoetz/valhalla/sov/01-background.html"
      },
      {
        "title": "Design Notes",
        "url": "https://openjdk.org/projects/valhalla/design-notes/"
      }
    ],
    "documentation": [
      {
        "title": "Technical Documentation",
        "sections": [
          {
            "name": "Value Types Guide",
            "url": "https://cr.openjdk.org/~briangoetz/valhalla/sov/02-value-types.html"
          },
          {
            "name": "Generic Specialization",
            "url": "https://cr.openjdk.org/~briangoetz/valhalla/sov/03-generics.html"
          },
          {
            "name": "Migration Guide",
            "url": "https://cr.openjdk.org/~briangoetz/valhalla/sov/04-migration.html"
          }
        ]
      },
      {
        "title": "Presentations",
        "sections": [
          {
            "name": "Value Types and Specialized Generics",
            "url": "https://www.youtube.com/watch?v=A-mxj2vhVAA"
          },
          {
            "name": "The Road to Valhalla",
            "url": "https://inside.java/2023/12/15/road-to-valhalla/"
          }
        ]
      }
    ]
  },
  "leyden": {
    "name": "Project Leyden",
    "description": "Improves Java application startup time, performance, and footprint through static images and ahead-of-time compilation.",
    "overview": "Project Leyden aims to improve the performance of Java programs by introducing static images and ahead-of-time compilation techniques. It addresses Java's startup time, memory usage, and peak performance while maintaining compatibility and dynamic features where needed.",
    "officialLink": "https://openjdk.org/projects/leyden/",
    "relatedJeps": [
        {
            "number": "410",
            "title": "Remove the Experimental AOT and JIT Compiler",
            "link": "https://openjdk.org/jeps/410"
          },
          {
            "number": "318",
            "title": "Epsilon: A No-Op Garbage Collector",
            "link": "https://openjdk.org/jeps/318"
          },
          {
            "number": "295",
            "title": "Ahead-of-Time Compilation",
            "link": "https://openjdk.org/jeps/295"
          },
          {
            "number": "352",
            "title": "Non-Volatile Mapped Byte Buffers",
            "link": "https://openjdk.org/jeps/352"
          }
    ],
    "examples": [
      {
        "title": "Static Image Examples",
        "url": "https://github.com/openjdk/leyden/blob/master/doc/static-images.md"
      },
      {
        "title": "Performance Benchmarks",
        "url": "https://wiki.openjdk.org/display/leyden/Performance+Results"
      },
      {
        "title": "Native Image Guide",
        "url": "https://www.graalvm.org/latest/reference-manual/native-image/"
      },
      {
        "title": "AOT Compilation Examples",
        "url": "https://inside.java/2023/10/24/leyden-aot-compilation/"
      },
      {
        "title": "Implementation Status",
        "url": "https://wiki.openjdk.org/display/leyden/Implementation+Notes"
      }
    ],
    "features": [
      {
        "name": "Static Images",
        "description": "Pre-computed runtime artifacts that improve startup time and reduce memory usage"
      },
      {
        "name": "Ahead-of-Time Compilation",
        "description": "Compilation of Java applications into native code before execution"
      },
      {
        "name": "Optimized Class Loading",
        "description": "Improved class loading mechanisms for faster application startup"
      },
      {
        "name": "Memory Footprint Reduction",
        "description": "Techniques to reduce the runtime memory requirements of Java applications"
      },
      {
        "name": "Selective Dynamic Features",
        "description": "Ability to choose which parts of an application remain dynamic"
      }
    ],
    "goals": [
      "Improve Java application startup time",
      "Reduce memory footprint",
      "Enhance peak performance",
      "Maintain Java platform compatibility",
      "Support cloud-native deployment scenarios",
      "Enable better microservices performance"
    ],
    "status": {
      "state": "Active Development",
      "currentPhase": "Exploration",
      "targetRelease": "Future JDK releases",
      "lastUpdated": "2024"
    },
    "resources": [
      {
        "title": "Project Wiki",
        "url": "https://wiki.openjdk.org/display/leyden"
      },
      {
        "title": "Mailing List",
        "url": "https://mail.openjdk.org/mailman/listinfo/leyden-dev"
      },
      {
        "title": "Source Repository",
        "url": "https://github.com/openjdk/leyden"
      },
      {
        "title": "Design Documents",
        "url": "https://openjdk.org/projects/leyden/design-notes/"
      }
    ],
    "documentation": [
      {
        "title": "Technical Documentation",
        "sections": [
          {
            "name": "Static Images Overview",
            "url": "https://openjdk.org/projects/leyden/static-images-overview"
          },
          {
            "name": "AOT Compilation Guide",
            "url": "https://openjdk.org/projects/leyden/aot-compilation-guide"
          },
          {
            "name": "Migration Guidelines",
            "url": "https://openjdk.org/projects/leyden/migration-guide"
          }
        ]
      },
      {
        "title": "Related Technologies",
        "sections": [
          {
            "name": "GraalVM Native Image",
            "url": "https://www.graalvm.org/latest/reference-manual/native-image/"
          },
          {
            "name": "CDS Archives",
            "url": "https://docs.oracle.com/en/java/javase/21/vm/class-data-sharing.html"
          }
        ]
      }
    ],
    "useCases": [
      {
        "name": "Microservices",
        "description": "Improved startup time and reduced memory footprint for containerized applications"
      },
      {
        "name": "Cloud Applications",
        "description": "Better resource utilization in cloud environments"
      },
      {
        "name": "CLI Tools",
        "description": "Fast startup for command-line applications"
      },
      {
        "name": "Serverless Functions",
        "description": "Reduced cold start times for serverless deployments"
      }
    ],
    "challenges": [
      {
        "name": "Dynamic Features",
        "description": "Balancing static compilation with Java's dynamic features"
      },
      {
        "name": "Reflection Support",
        "description": "Handling reflection and dynamic class loading"
      },
      {
        "name": "Development Experience",
        "description": "Maintaining developer productivity with static compilation"
      }
    ]
  }
  }